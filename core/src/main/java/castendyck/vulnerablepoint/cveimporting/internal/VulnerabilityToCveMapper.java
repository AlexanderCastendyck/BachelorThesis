package castendyck.vulnerablepoint.cveimporting.internal;

import castendyck.cpe.CPE;
import castendyck.cve.CVE;
import castendyck.cve.CveBuilder;
import castendyck.cvss.CVSS;
import castendyck.cvss.CvssBuilder;
import castendyck.cwe.CWE;
import castendyck.references.Reference;
import castendyck.references.ReferenceBuilder;
import castendyck.vulnerablesoftware.VulnerableSoftware;
import org.owasp.dependencycheck.dependency.Vulnerability;

import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class VulnerabilityToCveMapper {

    public static CVE mapToCve(Vulnerability vulnerability) {
        final String name = vulnerability.getName();
        final String description = vulnerability.getDescription();
        final CWE cwe = extractCwe(vulnerability);
        final CVSS cvss = extractCvss(vulnerability);
        final Set<VulnerableSoftware> vulnerableSoftware = extractVulnerableSoftware(vulnerability);
        final Set<Reference> references = extractReferences(vulnerability);
        final List<CPE> cpes = extractCpes(vulnerability);

        final CVE cve = CveBuilder.aCve()
                .withName(name)
                .withDescription(description)
                .withCwe(cwe)
                .withCvss(cvss)
                .withVulnerableSoftwareList(vulnerableSoftware)
                .withReferences(references)
                .withCpes(cpes)
                .build();

        return cve;
    }

    private static CWE extractCwe(Vulnerability vulnerability) {
        final String cweString = vulnerability.getCwe();
        if (cweString == null) {
            return CWE.createNew("");
        } else {
            return CWE.createNew(cweString);
        }
    }

    private static CVSS extractCvss(Vulnerability vulnerability) {
        final float score = vulnerability.getCvssScore();
        final String accessVector = vulnerability.getCvssAccessVector();
        final String accessComplexity = vulnerability.getCvssAccessComplexity();
        final String authentication = vulnerability.getCvssAuthentication();
        final String confidentialityImpact = vulnerability.getCvssConfidentialityImpact();
        final String integrityImpact = vulnerability.getCvssIntegrityImpact();
        final String availabilityImpact = vulnerability.getCvssAvailabilityImpact();

        final CVSS cvss = CvssBuilder.aCvss()
                .withAScore(score)
                .withAccessVector(accessVector)
                .withAccessComplexity(accessComplexity)
                .withAuthentication(authentication)
                .withConfidentialityImpact(confidentialityImpact)
                .withIntegrityImpact(integrityImpact)
                .withAvailabilityImpact(availabilityImpact)
                .build();
        return cvss;
    }

    private static Set<VulnerableSoftware> extractVulnerableSoftware(Vulnerability vulnerability) {
        final Set<org.owasp.dependencycheck.dependency.VulnerableSoftware> vulnerableSoftware = vulnerability.getVulnerableSoftware();
        final Set<VulnerableSoftware> mappedVulnerableSoftware = vulnerableSoftware.stream()
                .map(VulnerabilityToCveMapper::mapToVulnerableSoftware)
                .collect(Collectors.toSet());

        return mappedVulnerableSoftware;
    }

    private static VulnerableSoftware mapToVulnerableSoftware(org.owasp.dependencycheck.dependency.VulnerableSoftware vulnerableSoftware) {
        final String name = vulnerableSoftware.getName();
        return VulnerableSoftware.createFromString(name);
    }

    private static Set<Reference> extractReferences(Vulnerability vulnerability) {
        final Set<org.owasp.dependencycheck.dependency.Reference> references = vulnerability.getReferences();
        final Set<Reference> mappedReferences = references.stream()
                .map(VulnerabilityToCveMapper::mapToReference)
                .collect(Collectors.toSet());

        return mappedReferences;
    }

    private static Reference mapToReference(org.owasp.dependencycheck.dependency.Reference reference) {
        final String name = reference.getName();
        final String source = reference.getSource();
        final String url = reference.getUrl();

        final Reference mappedReference = ReferenceBuilder.aReference()
                .withName(name)
                .withSource(source)
                .withUrl(url)
                .build();
        return mappedReference;
    }

    private static List<CPE> extractCpes(Vulnerability vulnerability) {
        final String matchedCPE = vulnerability.getMatchedCPE();
        final CPE cpe = CPE.createNew(matchedCPE);
        final List<CPE> cpes = Collections.singletonList(cpe);
        return cpes;
    }
}
